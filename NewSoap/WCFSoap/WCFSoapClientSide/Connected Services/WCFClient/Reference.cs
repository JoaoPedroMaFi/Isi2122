//------------------------------------------------------------------------------
// <auto-generated>
//     Esse código foi gerado por uma ferramenta.
//
//     As alterações no arquivo poderão causar comportamento incorreto e serão perdidas se
//     o código for gerado novamente.
// </auto-generated>
//------------------------------------------------------------------------------

namespace WCFClient
{
    using System.Runtime.Serialization;
    
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Tools.ServiceModel.Svcutil", "2.0.3-preview3.21351.2")]
    [System.Runtime.Serialization.DataContractAttribute(Name="Infectado", Namespace="http://schemas.datacontract.org/2004/07/WCFSoap.Models")]
    public partial class Infectado : object
    {
        
        private string FirstnameField;
        
        private int IdequipaField;
        
        private int IdpessoaField;
        
        private string LaststnameField;
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Firstname
        {
            get
            {
                return this.FirstnameField;
            }
            set
            {
                this.FirstnameField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int Idequipa
        {
            get
            {
                return this.IdequipaField;
            }
            set
            {
                this.IdequipaField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int Idpessoa
        {
            get
            {
                return this.IdpessoaField;
            }
            set
            {
                this.IdpessoaField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Laststname
        {
            get
            {
                return this.LaststnameField;
            }
            set
            {
                this.LaststnameField = value;
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Tools.ServiceModel.Svcutil", "2.0.3-preview3.21351.2")]
    [System.Runtime.Serialization.DataContractAttribute(Name="Equipa", Namespace="http://schemas.datacontract.org/2004/07/WCFSoap.Models")]
    public partial class Equipa : object
    {
        
        private int IdequipaField;
        
        private string NomeField;
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int Idequipa
        {
            get
            {
                return this.IdequipaField;
            }
            set
            {
                this.IdequipaField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Nome
        {
            get
            {
                return this.NomeField;
            }
            set
            {
                this.NomeField = value;
            }
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Tools.ServiceModel.Svcutil", "2.0.3-preview3.21351.2")]
    [System.ServiceModel.ServiceContractAttribute(ConfigurationName="WCFClient.IClient")]
    public interface IClient
    {
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IClient/Get", ReplyAction="http://tempuri.org/IClient/GetResponse")]
        System.Threading.Tasks.Task<WCFClient.Infectado> GetAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IClient/GetAll", ReplyAction="http://tempuri.org/IClient/GetAllResponse")]
        System.Threading.Tasks.Task<WCFClient.Infectado[]> GetAllAsync(int idPerson);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IClient/IndicateInfetion", ReplyAction="http://tempuri.org/IClient/IndicateInfetionResponse")]
        System.Threading.Tasks.Task IndicateInfetionAsync(WCFClient.Equipa equipa, WCFClient.Infectado infectado);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IClient/IndicateInfetionList", ReplyAction="http://tempuri.org/IClient/IndicateInfetionListResponse")]
        System.Threading.Tasks.Task IndicateInfetionListAsync(WCFClient.Infectado[] list);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IClient/InsertNewInfectedClient", ReplyAction="http://tempuri.org/IClient/InsertNewInfectedClientResponse")]
        System.Threading.Tasks.Task<bool> InsertNewInfectedClientAsync(string firstName, string lastName, int idEquipa);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IClient/InsertNewSuspectClient", ReplyAction="http://tempuri.org/IClient/InsertNewSuspectClientResponse")]
        System.Threading.Tasks.Task InsertNewSuspectClientAsync(string firstName, string lastName, int id, int idInfetado);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Tools.ServiceModel.Svcutil", "2.0.3-preview3.21351.2")]
    public interface IClientChannel : WCFClient.IClient, System.ServiceModel.IClientChannel
    {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Tools.ServiceModel.Svcutil", "2.0.3-preview3.21351.2")]
    public partial class ClientClient : System.ServiceModel.ClientBase<WCFClient.IClient>, WCFClient.IClient
    {
        
        /// <summary>
        /// Implemente este método parcial para configurar o ponto de extremidade de serviço.
        /// </summary>
        /// <param name="serviceEndpoint">O ponto de extremidade a ser configurado</param>
        /// <param name="clientCredentials">As credenciais do cliente</param>
        static partial void ConfigureEndpoint(System.ServiceModel.Description.ServiceEndpoint serviceEndpoint, System.ServiceModel.Description.ClientCredentials clientCredentials);
        
        public ClientClient() : 
                base(ClientClient.GetDefaultBinding(), ClientClient.GetDefaultEndpointAddress())
        {
            this.Endpoint.Name = EndpointConfiguration.BasicHttpBinding_IClient.ToString();
            ConfigureEndpoint(this.Endpoint, this.ClientCredentials);
        }
        
        public ClientClient(EndpointConfiguration endpointConfiguration) : 
                base(ClientClient.GetBindingForEndpoint(endpointConfiguration), ClientClient.GetEndpointAddress(endpointConfiguration))
        {
            this.Endpoint.Name = endpointConfiguration.ToString();
            ConfigureEndpoint(this.Endpoint, this.ClientCredentials);
        }
        
        public ClientClient(EndpointConfiguration endpointConfiguration, string remoteAddress) : 
                base(ClientClient.GetBindingForEndpoint(endpointConfiguration), new System.ServiceModel.EndpointAddress(remoteAddress))
        {
            this.Endpoint.Name = endpointConfiguration.ToString();
            ConfigureEndpoint(this.Endpoint, this.ClientCredentials);
        }
        
        public ClientClient(EndpointConfiguration endpointConfiguration, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(ClientClient.GetBindingForEndpoint(endpointConfiguration), remoteAddress)
        {
            this.Endpoint.Name = endpointConfiguration.ToString();
            ConfigureEndpoint(this.Endpoint, this.ClientCredentials);
        }
        
        public ClientClient(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(binding, remoteAddress)
        {
        }
        
        public System.Threading.Tasks.Task<WCFClient.Infectado> GetAsync()
        {
            return base.Channel.GetAsync();
        }
        
        public System.Threading.Tasks.Task<WCFClient.Infectado[]> GetAllAsync(int idPerson)
        {
            return base.Channel.GetAllAsync(idPerson);
        }
        
        public System.Threading.Tasks.Task IndicateInfetionAsync(WCFClient.Equipa equipa, WCFClient.Infectado infectado)
        {
            return base.Channel.IndicateInfetionAsync(equipa, infectado);
        }
        
        public System.Threading.Tasks.Task IndicateInfetionListAsync(WCFClient.Infectado[] list)
        {
            return base.Channel.IndicateInfetionListAsync(list);
        }
        
        public System.Threading.Tasks.Task<bool> InsertNewInfectedClientAsync(string firstName, string lastName, int idEquipa)
        {
            return base.Channel.InsertNewInfectedClientAsync(firstName, lastName, idEquipa);
        }
        
        public System.Threading.Tasks.Task InsertNewSuspectClientAsync(string firstName, string lastName, int id, int idInfetado)
        {
            return base.Channel.InsertNewSuspectClientAsync(firstName, lastName, id, idInfetado);
        }
        
        public virtual System.Threading.Tasks.Task OpenAsync()
        {
            return System.Threading.Tasks.Task.Factory.FromAsync(((System.ServiceModel.ICommunicationObject)(this)).BeginOpen(null, null), new System.Action<System.IAsyncResult>(((System.ServiceModel.ICommunicationObject)(this)).EndOpen));
        }
        
        public virtual System.Threading.Tasks.Task CloseAsync()
        {
            return System.Threading.Tasks.Task.Factory.FromAsync(((System.ServiceModel.ICommunicationObject)(this)).BeginClose(null, null), new System.Action<System.IAsyncResult>(((System.ServiceModel.ICommunicationObject)(this)).EndClose));
        }
        
        private static System.ServiceModel.Channels.Binding GetBindingForEndpoint(EndpointConfiguration endpointConfiguration)
        {
            if ((endpointConfiguration == EndpointConfiguration.BasicHttpBinding_IClient))
            {
                System.ServiceModel.BasicHttpBinding result = new System.ServiceModel.BasicHttpBinding();
                result.MaxBufferSize = int.MaxValue;
                result.ReaderQuotas = System.Xml.XmlDictionaryReaderQuotas.Max;
                result.MaxReceivedMessageSize = int.MaxValue;
                result.AllowCookies = true;
                return result;
            }
            throw new System.InvalidOperationException(string.Format("Não foi possível encontrar o ponto de extremidade com o nome \'{0}\'.", endpointConfiguration));
        }
        
        private static System.ServiceModel.EndpointAddress GetEndpointAddress(EndpointConfiguration endpointConfiguration)
        {
            if ((endpointConfiguration == EndpointConfiguration.BasicHttpBinding_IClient))
            {
                return new System.ServiceModel.EndpointAddress("http://localhost:51497/Services/Client.svc");
            }
            throw new System.InvalidOperationException(string.Format("Não foi possível encontrar o ponto de extremidade com o nome \'{0}\'.", endpointConfiguration));
        }
        
        private static System.ServiceModel.Channels.Binding GetDefaultBinding()
        {
            return ClientClient.GetBindingForEndpoint(EndpointConfiguration.BasicHttpBinding_IClient);
        }
        
        private static System.ServiceModel.EndpointAddress GetDefaultEndpointAddress()
        {
            return ClientClient.GetEndpointAddress(EndpointConfiguration.BasicHttpBinding_IClient);
        }
        
        public enum EndpointConfiguration
        {
            
            BasicHttpBinding_IClient,
        }
    }
}
